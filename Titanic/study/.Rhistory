attached
help?
c
help()
ls
ls
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("randomForest")
local({r <- getOption("repos")
r["CRAN"] <- "http://mirrors.aliyun.com/CRAN/"
r["CRANextra"] <- "http://mirrors.aliyun.com/CRAN/"
options(repos=r)})
library('randomForest') # classification algorithm
install.packages("randomForest")
ls
install.packages("ggthemes")
train <- read.csv('../data/train.csv', stringsAsFactors = F)
setwd()
setwd(F:\lab\kaggle\kaggle\Titanic\study)
setwd("F:\lab\kaggle\kaggle\Titanic\study")
setwd("F:\\lab\\kaggle\\kaggle\\Titanic\\study")
train <- read.csv('../data/train.csv', stringsAsFactors = F)
test  <- read.csv('../input/test.csv', stringsAsFactors = F)
setwd("F:\\lab\\kaggle\\kaggle\\Titanic\\study")
test  <- read.csv('../input/test.csv', stringsAsFactors = F)
test  <- read.csv('../data/test.csv', stringsAsFactors = F)
full  <- bind_rows(train, test)
str(full)
str(full)
summary(full)
nrow(test)
nrow(train)
str(full)
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
View(full)
table(full$Sex,full$Title)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name,function(x) strsplit(x, split = '[,.]')[[1]][1])
View(full)
nlevels(factor(full$Surname))
cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.'))
names(full)
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep='_')
View(full)
nrow(full)
nrow(train)
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size')
names(full)
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
strsplit(full$Cabin[2], NULL)[[1]]
full$Cabin[2]
strsplit(full$Cabin[2], NULL)
strsplit(full$Cabin[2], NULL)[[1]][1]
# Create a Deck variable. Get passenger deck A - F:
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), 'Embarked']
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
library('ggthemes') # visualization
# Get rid of our missing passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# Use ggplot2 to visualize embarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
embark_fare
View(embark_fare)
# Since their fare was $80 for 1st class, they most likely embarked from 'C'
full$Embarked[c(62, 830)] <- 'C'
summary(full)
full[1044, ]
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
median(c[1,2,3])
median(c(1,2,3)
)
median(c(1,2,3,3,4,5))
median(c(1,2,3,3,4,5,8,10,23,12))
median(c(1,2,3,3,4,5,8,10,23,12,11))
median(c(1,2,3,3,4,5,8,10,23,12,11,11))
median(c(1,2,3,3,4,5,8,10,23,12,11,12))
median(c(1,2,3,3,4,5,8,10,23,12,11,12,13))
# Show number of missing Age values
sum(is.na(full$Age))
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
View(full)
names(full)
!names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')
names(full)[!names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')]
View(full)
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')
mice_output <- complete(mice_mod)
# Plot age distributions
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
View(mice_output)
full$Age <- mice_output$Age
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
# First we'll look at the relationship between age & survival
ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
# I include Sex since we know (a priori) it's a significant predictor
facet_grid(.~Sex) +
theme_few()
# First we'll look at the relationship between age & survival
ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
# I include Sex since we know (a priori) it's a significant predictor
facet_grid(.~Sex)
# Create the column child, and indicate whether child or adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# Show counts
table(full$Child, full$Survived)
# Adding Mother variable
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
# Show counts
table(full$Mother, full$Survived)
# Finish by factorizing our two new factor variables
full$Child  <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
names(full)
train <- full[1:891,]
test <- full[892:1309,]
# Set a random seed
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
import("randomForest")
library(randomForest)
set.seed(754)# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
# Show model error
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
predict(rf_model,data=test)
predict_survive = predict(rf_model,data=test)
predict_survive
test["predict_survive"] = predict_survive
nrow(test)
nrow(predict_survive)
length(predict_survive)
type(predict_survive)
class(predict_survive)
predict_survive
nrow(test)
predict_survive
predict_survive
length(predict_survive)
?randomForest
predict_survive = predict(rf_model,data=test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution <- data.frame(PassengerID = test$PassengerId, Survived = predict_survive)
prediction <- predict(rf_model, test)
length(prediction)
prediction <- predict(rf_model, data=test)
length(prediction)
prediction <- predict(rf_model, test)
# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
# Write the solution to file
write.csv(solution, file = 'megan_rf_mod_Solution.csv', row.names = F)
View(train)
View(train)
library(gbm)
install.packages("gbm")
library("gbm")
?gbm
gbml <- gbm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,data=train)
prediction <- predict(gbml, test)
gbm.perf(gbml,
plot.it = TRUE,
oobag.curve = FALSE,
overlay = TRUE,
method = ”cv”)
best.iter <- gbm.perf(gbm1,method="OOB")
best.iter <- gbm.perf(gbml,method="OOB")
best.iter <- gbm.perf(gbml,method="cv")
best.iter <- gbm.perf(gbml,method="test")
gbm.perf(gbml,
plot.it = TRUE,
oobag.curve = FALSE,
overlay = TRUE,
method="cv")
prediction_gbdt <- predict(gbml, test,10)
prediction_gbdt
prediction_gbdt <- predict(gbml, test,1)
prediction_gbdt
gbml <- gbm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,data=train)
